AWSTemplateFormatVersion: 2010-09-09
Description: 'AWS Reference Architecture Stack'
Parameters:
  VpcCidr:
    Type: 'String'
    Description: CIDR range of the Virtual Private Cloud (VPC) to be created
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.99.0.0/16
  PublicSubnet1Cidr:
    Type: 'String'
    Description: CIDR range of PublicSubnet1 to be created
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.99.1.0/24
  PublicSubnet2Cidr:
    Type: 'String'
    Description: CIDR range of PublicSubnet2 to be created
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.99.2.0/24
  PrivateSubnet1Cidr:
    Type: 'String'
    Description: CIDR block for PrivateSubnet1 (Web Servers)
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.99.11.0/24
  PrivateSubnet2Cidr:
    Type: 'String'
    Description: CIDR block for PrivateSubnet2 (Web Servers)
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.99.12.0/24
  PrivateSubnet3Cidr:
    Type: 'String'
    Description: CIDR block for PrivateSubnet3 (DB Servers)
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.99.21.0/24
  PrivateSubnet4Cidr:
    Type: 'String'
    Description: CIDR block for PrivateSubnet4 (DB Servers)
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.99.22.0/24
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Default: AWS-REF-ARCH 
  PrimaryTagName:
    Description: Name to be used as the primary name tag. For identification purposes.
    Type: 'String'
    Default: AWS-REF-ARCH
  OperatorEmail: 
      Description: "Email address to notify when new logs are published."
      Type: String
      Default: damian.mcdonald.tcs@gmail.com
  DBName:
    Description: The database name
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
    Default: MyDatabase
  DBUser:
    NoEcho: 'true'
    Description: The database admin account username
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
    Default: dbuser
  DBPassword:
    NoEcho: 'true'
    Description: The database admin account password
    Type: String
    MinLength: '1'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]+'
    ConstraintDescription: must contain only alphanumeric characters.
    Default: dbpassword
  DBAllocatedStorage:
    Description: The size of the database (Gb)
    Type: Number
    MinValue: '5'
    MaxValue: '1024'
    ConstraintDescription: must be between 5 and 1024Gb.
    Default: '5'
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: 'true'
      EnableDnsSupport: 'true'
      Tags:
        - Key: Name
          Value: !Ref PrimaryTagName
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Ref PrimaryTagName
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  DMZ1public:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
      CidrBlock: !Ref PublicSubnet1Cidr
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: DMZ1public
        - Key: Stack
          Value: !Ref PrimaryTagName
  DMZ2public:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
        - '1'
        - !GetAZs ''
      CidrBlock: !Ref PublicSubnet2Cidr
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: DMZ2public
        - Key: Stack
          Value: !Ref PrimaryTagName
  AppLayer1private:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
      CidrBlock: !Ref PrivateSubnet1Cidr
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: AppLayer1private
        - Key: Stack
          Value: !Ref PrimaryTagName
  AppLayer2private:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
        - '1'
        - !GetAZs ''
      CidrBlock: !Ref PrivateSubnet2Cidr
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: AppLayer2private
        - Key: Stack
          Value: !Ref PrimaryTagName
  DBLayer1private:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
      CidrBlock: !Ref PrivateSubnet3Cidr
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: DBLayer1private
        - Key: Stack
          Value: !Ref PrimaryTagName
  DBLayer2private:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
        - '1'
        - !GetAZs ''
      CidrBlock: !Ref PrivateSubnet4Cidr
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: DBLayer2private
        - Key: Stack
          Value: !Ref PrimaryTagName
  PublicRT:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PublicRT
        - Key: Stack
          Value: !Ref PrimaryTagName
  RouteTableAssociationA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref DMZ1public
      RouteTableId: !Ref PublicRT
  RouteTableAssociationB:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref DMZ2public
      RouteTableId: !Ref PublicRT
  RoutePublicNATToInternet:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PublicRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
    DependsOn: VPCGatewayAttachment
  NATElasticIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
    DependsOn: VPCGatewayAttachment
  NATGateway:
    Type: 'AWS::EC2::NatGateway'
    DependsOn: NATElasticIP
    Properties:
      AllocationId: !GetAtt
        - NATElasticIP
        - AllocationId
      SubnetId: !Ref DMZ2public
  NATGatewayRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRT
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
  PrivateRT:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateRT
  RouteTableAssociationC:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref AppLayer1private
      RouteTableId: !Ref PrivateRT
  RouteTableAssociationD:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref AppLayer2private
      RouteTableId: !Ref PrivateRT
  RouteTableAssociationE:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref DBLayer1private
      RouteTableId: !Ref PrivateRT
  RouteTableAssociationF:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref DBLayer2private
      RouteTableId: !Ref PrivateRT
  DMZNACL:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: DMZNACL
  SubnetNetworkAclAssociationA:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref DMZ1public
      NetworkAclId: !Ref DMZNACL
  SubnetNetworkAclAssociationB:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref DMZ2public
      NetworkAclId: !Ref DMZNACL
  DMZNACLEntryIngress100:
    Type: 'AWS::EC2::NetworkAclEntry'
    DependsOn: DMZNACL
    Properties:
      NetworkAclId: !Ref DMZNACL
      RuleNumber: '100'
      Protocol: '6'
      PortRange:
        From: '22'
        To: '22'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
  DMZNACLEntryIngress110:
    Type: 'AWS::EC2::NetworkAclEntry'
    DependsOn: DMZNACL
    Properties:
      NetworkAclId: !Ref DMZNACL
      RuleNumber: '110'
      Protocol: '6'
      PortRange:
        From: '80'
        To: '80'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
  DMZNACLEntryIngress120:
    Type: 'AWS::EC2::NetworkAclEntry'
    DependsOn: DMZNACL
    Properties:
      NetworkAclId: !Ref DMZNACL
      RuleNumber: '120'
      Protocol: '6'
      PortRange:
        From: '443'
        To: '443'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
  DMZNACLEntryIngress130:
    Type: 'AWS::EC2::NetworkAclEntry'
    DependsOn: DMZNACL
    Properties:
      NetworkAclId: !Ref DMZNACL
      RuleNumber: '130'
      Protocol: '6'
      PortRange:
        From: '1024'
        To: '65535'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
  DMZNACLEntryEgress100:
    Type: 'AWS::EC2::NetworkAclEntry'
    DependsOn: DMZNACL
    Properties:
      NetworkAclId: !Ref DMZNACL
      RuleNumber: '100'
      Protocol: '6'
      PortRange:
        From: '22'
        To: '22'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
  DMZNACLEntryEgress110:
    Type: 'AWS::EC2::NetworkAclEntry'
    DependsOn: DMZNACL
    Properties:
      NetworkAclId: !Ref DMZNACL
      RuleNumber: '110'
      Protocol: '6'
      PortRange:
        From: '80'
        To: '80'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
  DMZNACLEntryEgress120:
    Type: 'AWS::EC2::NetworkAclEntry'
    DependsOn: DMZNACL
    Properties:
      NetworkAclId: !Ref DMZNACL
      RuleNumber: '120'
      Protocol: '6'
      PortRange:
        From: '443'
        To: '443'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
  DMZNACLEntryEgress130:
    Type: 'AWS::EC2::NetworkAclEntry'
    DependsOn: DMZNACL
    Properties:
      NetworkAclId: !Ref DMZNACL
      RuleNumber: '130'
      Protocol: '6'
      PortRange:
        From: '1024'
        To: '65535'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
  AppNACL:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: AppNACL
  SubnetNetworkAclAssociationC:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref AppLayer1private
      NetworkAclId: !Ref AppNACL
  SubnetNetworkAclAssociationD:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref AppLayer2private
      NetworkAclId: !Ref AppNACL
  AppNACLEntryIngress100:
    Type: 'AWS::EC2::NetworkAclEntry'
    DependsOn: AppNACL
    Properties:
      NetworkAclId: !Ref AppNACL
      RuleNumber: '100'
      Protocol: '6'
      PortRange:
        From: '22'
        To: '22'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 10.99.0.0/16
  AppNACLEntryIngress110:
    Type: 'AWS::EC2::NetworkAclEntry'
    DependsOn: AppNACL
    Properties:
      NetworkAclId: !Ref AppNACL
      RuleNumber: '110'
      Protocol: '6'
      PortRange:
        From: '80'
        To: '80'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 10.99.0.0/16
  AppNACLEntryIngress120:
    Type: 'AWS::EC2::NetworkAclEntry'
    DependsOn: AppNACL
    Properties:
      NetworkAclId: !Ref AppNACL
      RuleNumber: '120'
      Protocol: '6'
      PortRange:
        From: '443'
        To: '443'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 10.99.0.0/16
  AppNACLEntryIngress130:
    Type: 'AWS::EC2::NetworkAclEntry'
    DependsOn: AppNACL
    Properties:
      NetworkAclId: !Ref AppNACL
      RuleNumber: '130'
      Protocol: '6'
      PortRange:
        From: '1024'
        To: '65535'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
  AppNACLEntryEgress110:
    Type: 'AWS::EC2::NetworkAclEntry'
    DependsOn: AppNACL
    Properties:
      NetworkAclId: !Ref AppNACL
      RuleNumber: '110'
      Protocol: '6'
      PortRange:
        From: '80'
        To: '80'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
  AppNACLEntryEgress120:
    Type: 'AWS::EC2::NetworkAclEntry'
    DependsOn: AppNACL
    Properties:
      NetworkAclId: !Ref AppNACL
      RuleNumber: '120'
      Protocol: '6'
      PortRange:
        From: '443'
        To: '443'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
  AppNACLEntryEgress130:
    Type: 'AWS::EC2::NetworkAclEntry'
    DependsOn: AppNACL
    Properties:
      NetworkAclId: !Ref AppNACL
      RuleNumber: '130'
      Protocol: '6'
      PortRange:
        From: '1024'
        To: '65535'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 10.99.0.0/16
  DBNACL:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: DBNACL
  SubnetNetworkAclAssociationE:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref DBLayer1private
      NetworkAclId: !Ref DBNACL
  SubnetNetworkAclAssociationF:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref DBLayer2private
      NetworkAclId: !Ref DBNACL
  DBNACLEntryIngress100:
    Type: 'AWS::EC2::NetworkAclEntry'
    DependsOn: DBNACL
    Properties:
      NetworkAclId: !Ref DBNACL
      RuleNumber: '100'
      Protocol: '6'
      PortRange:
        From: '3306'
        To: '3306'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 10.99.0.0/16
  DBNACLEntryIngress110:
    Type: 'AWS::EC2::NetworkAclEntry'
    DependsOn: DBNACL
    Properties:
      NetworkAclId: !Ref DBNACL
      RuleNumber: '110'
      Protocol: '6'
      PortRange:
        From: '1024'
        To: '65535'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
  DBNACLEntryEgress100:
    Type: 'AWS::EC2::NetworkAclEntry'
    DependsOn: DBNACL
    Properties:
      NetworkAclId: !Ref DBNACL
      RuleNumber: '100'
      Protocol: '6'
      PortRange:
        From: '3306'
        To: '3306'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 10.99.0.0/16
  DBNACLEntryEgress110:
    Type: 'AWS::EC2::NetworkAclEntry'
    DependsOn: DBNACL
    Properties:
      NetworkAclId: !Ref DBNACL
      RuleNumber: '110'
      Protocol: '6'
      PortRange:
        From: '1024'
        To: '65535'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 10.99.0.0/16

  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Subnets:
        - !Ref DMZ1public
        - !Ref DMZ2public
      Name: load-balancer
      Type: application
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      IpAddressType: ipv4
      Tags:
        - Key: Name
          Value: !Ref PrimaryTagName
  Listener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: '80'
      Protocol: HTTP
  TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: '10'
      HealthCheckPath: /index.php
      HealthCheckPort: '80'
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: '2'
      Name: TG1
      Port: '80'
      Protocol: HTTP
      UnhealthyThresholdCount: '2'
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Ref PrimaryTagName

  BastionSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: sg-apache-bastion
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: BastionSG
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
  LoadBalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: sg-apache-elb
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: LoadBalancerSG
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: sg-apache-ec2
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: WebServerSG
      SecurityGroupIngress:
        - FromPort: 22
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref BastionSecurityGroup
          ToPort: 22
        - FromPort: 80
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
          ToPort: 80
  LaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    DependsOn: VPCGatewayAttachment
    Metadata:
      Comment: Install a simple PHP application
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              httpd: []
              php: []
          files:
            "/var/www/html/index.php":
              content: !Sub |
                <?php echo '<h1>AWS CloudFormation sample PHP application</h1>' ?>
                <?php echo gethostname(); ?>
              mode: '000644'
              owner: apache
              group: apache
            "/etc/cfn/cfn-hup.conf":
              content: !Sub |
                [main]
                stack= ${AWS::StackId}
                region=${AWS::Region}
              mode: "000400"
              owner: "root"
              group: "root"
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.LaunchConfiguration.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfiguration --region ${AWS::Region}
              mode: "000400"
              owner: "root"
              group: "root"
          services:
            sysvinit:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
    Properties:
      ImageId: 'ami-0713f98de93617bb4'
      InstanceType: t2.micro
      IamInstanceProfile: !Ref LogRoleInstanceProfile
      SecurityGroups:
        - !Ref WebServerSecurityGroup
      KeyName: !Ref KeyName
      AssociatePublicIpAddress: 'false'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          # Get the latest CloudFormation package
          sudo yum update -y aws-cfn-bootstrap
          # Start cfn-init
          sudo /opt/aws/bin/cfn-init -s ${AWS::StackId} -r LaunchConfiguration --region ${AWS::Region} || error_exit 'Failed to run cfn-init'
          # Start up the cfn-hup daemon to listen for changes to the EC2 instance metadata
          sudo /opt/aws/bin/cfn-hup || error_exit 'Failed to start cfn-hup'
          # install the aws logs agent
          sudo yum install -y awslogs
          # configure the awscli.conf file
          if [ -f "/etc/awslogs/awscli.conf" ]; then sudo rm -vf /etc/awslogs/awscli.conf; fi
          cat > /etc/awslogs/awscli.conf <<EOF
          [plugins]
          cwlogs = cwlogs
          [default]
          region = eu-west-1
          EOF
          # configure the awslogs.conf file
          if [ -f "/etc/awslogs/awslogs.conf" ]; then sudo rm -vf /etc/awslogs/awslogs.conf; fi
          cat > /etc/awslogs/awslogs.conf <<EOF
          [general]
          state_file = push-state

          [/var/log/messages]
          datetime_format = %b %d %H:%M:%S
          file = /var/log/messages
          buffer_duration = 5000
          log_stream_name = {hostname}-{instance_id}/general
          initial_position = start_of_file
          log_group_name = webserver

          [/var/log/httpd/access_log]
          file = /var/log/httpd/access_log
          log_group_name = webserver
          log_stream_name = {hostname}-{instance_id}/apache
          datetime_format = %d/%b/%Y:%H:%M:%S
          buffer_duration = 5000
          EOF
          # set permission on the awscli and awslogs conf files
          sudo chmod u+rw /etc/awslogs/awscli.conf
          sudo chmod g+r /etc/awslogs/awscli.conf
          sudo chmod u+rw /etc/awslogs/awslogs.conf
          sudo chmod g+r /etc/awslogs/awslogs.conf
          # start and enable the awslogs service
          sudo service awslogsd stop
          sudo service awslogsd start
          sudo chkconfig awslogsd on
          # add the epel repo
          sudo amazon-linux-extras install epel -y
          # add the stress tool for testing cpu stress
          sudo yum install stress -y
          # All done so signal success
          sudo /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource LaunchConfiguration --region ${AWS::Region}
      InstanceMonitoring: 'true'
  WebServerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: webserver
      RetentionInDays: 7
  AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      TargetGroupARNs:
        - !Ref TargetGroup
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: '2'
      MaxSize: '5'
      DesiredCapacity: '2'
      Cooldown: '300'
      HealthCheckGracePeriod: '300'
      HealthCheckType: ELB
      VPCZoneIdentifier:
        - !Ref AppLayer1private
        - !Ref AppLayer2private
      Tags:
        - PropagateAtLaunch: 'true'
          Value: instance-apache
          Key: Name
        - PropagateAtLaunch: 'true'
          Value: !Ref PrimaryTagName
          Key: Stack
  BastionInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t2.micro
      ImageId: 'ami-0713f98de93617bb4'
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - GroupSet:
            - !Ref BastionSecurityGroup
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref DMZ1public
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum update -y
      Tags:
        - Value: bastion-host
          Key: Name
        - Key: Stack
          Value: !Ref PrimaryTagName

  WebServerScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: 120
      ScalingAdjustment: 1
  WebServerScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: 120
      ScalingAdjustment: -1
  CPUScaleUpAlarm:
   Type: AWS::CloudWatch::Alarm
   Properties:
      AlarmDescription: Scale-up if CPU > 70% for 60 seconds
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 60
      EvaluationPeriods: 1
      Threshold: 70
      AlarmActions:
        - !Ref WebServerScaleUpPolicy
        - !Ref CloudWatchTopic
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroup
      ComparisonOperator: GreaterThanOrEqualToThreshold
  CPUScaleDownAlarm:
   Type: AWS::CloudWatch::Alarm
   Properties:
      AlarmDescription: Scale-up if CPU < 30% for 60 seconds
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 60
      EvaluationPeriods: 1
      Threshold: 30
      AlarmActions:
        - !Ref WebServerScaleDownPolicy
        - !Ref CloudWatchTopic
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroup
      ComparisonOperator: LessThanThreshold
  CloudWatchTopic: 
    Type: AWS::SNS::Topic
    Properties: 
      Subscription: 
        - 
          Endpoint: 
            Ref: OperatorEmail
          Protocol: email
  CloudWatchTopicPolicy: 
    Type: AWS::SNS::TopicPolicy
    Properties: 
      Topics: 
        - Ref: "CloudWatchTopic"
      PolicyDocument: 
        Version: "2008-10-17"
        Statement: 
          - 
            Sid: "AWSCloudWatchSNSPolicy"
            Effect: "Allow"
            Principal: 
              Service: "cloudwatch.amazonaws.com"
            Resource: "*"
            Action: "SNS:Publish"
  LogRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: LogRolePolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:Create*
            - logs:PutLogEvents
            - s3:GetObject
            Resource:
            - arn:aws:logs:*:*:*
            - arn:aws:s3:::*
  LogRoleInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: LogRole

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: sg-rds-mysql
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: MySQLRdsSG
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '3306'
        ToPort: '3306'
        SourceSecurityGroupId: !Ref WebServerSecurityGroup
      - IpProtocol: tcp
        FromPort: '3306'
        ToPort: '3306'
        SourceSecurityGroupId: !Ref BastionSecurityGroup
  DBSubnetGroupMultiAZ:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: DB Subnet group
      SubnetIds:
      - Ref: DBLayer1private
      - Ref: DBLayer2private
      Tags:
      - Key: Name
        Value: !Ref PrimaryTagName
  MasterDB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Ref 'DBName'
      AllocatedStorage: !Ref 'DBAllocatedStorage'
      DBInstanceClass: db.t2.micro
      Engine: MySQL
      MasterUsername: !Ref 'DBUser'
      MasterUserPassword: !Ref 'DBPassword'
      MultiAZ: true
      DBSubnetGroupName: !Ref DBSubnetGroupMultiAZ
      Tags:
      - Key: Name
        Value: Master Database
      - Key: Stack
        Value: !Ref PrimaryTagName
      VPCSecurityGroups: 
      - !Ref DBSecurityGroup
  ReplicaDB:
    Type: AWS::RDS::DBInstance
    Properties:
      SourceDBInstanceIdentifier: !Ref 'MasterDB'
      DBInstanceClass: db.t2.micro
      Tags:
      - Key: Name
        Value: Read Replica Database
      - Key: Stack
        Value: !Ref PrimaryTagName

  CloudTrailBucket: 
    Type: AWS::S3::Bucket
    Properties:
      BucketName: archrefstackcloudtrail
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
  CloudTrailBucketPolicy: 
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: 
        Ref: CloudTrailBucket
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Sid: "AWSCloudTrailAclCheck"
            Effect: "Allow"
            Principal: 
              Service: "cloudtrail.amazonaws.com"
            Action: "s3:GetBucketAcl"
            Resource: 
              !Sub |-
                arn:aws:s3:::${CloudTrailBucket}
          - 
            Sid: "AWSCloudTrailWrite"
            Effect: "Allow"
            Principal: 
              Service: "cloudtrail.amazonaws.com"
            Action: "s3:PutObject"
            Resource:
              !Sub |-
                arn:aws:s3:::${CloudTrailBucket}/AWSLogs/${AWS::AccountId}/*
            Condition: 
              StringEquals:
                s3:x-amz-acl: "bucket-owner-full-control"
  CloudTrailTopic: 
    Type: AWS::SNS::Topic
    Properties: 
      Subscription: 
        - 
          Endpoint: 
            Ref: OperatorEmail
          Protocol: email
  CloudTrailTopicPolicy: 
    Type: AWS::SNS::TopicPolicy
    Properties: 
      Topics: 
        - Ref: "CloudTrailTopic"
      PolicyDocument: 
        Version: "2008-10-17"
        Statement: 
          - 
            Sid: "AWSCloudTrailSNSPolicy"
            Effect: "Allow"
            Principal: 
              Service: "cloudtrail.amazonaws.com"
            Resource: "*"
            Action: "SNS:Publish"
  AuditTrail: 
    DependsOn: 
      - CloudTrailBucketPolicy
      - CloudTrailTopicPolicy
    Type: AWS::CloudTrail::Trail
    Properties: 
      S3BucketName: 
        Ref: CloudTrailBucket
      SnsTopicName: 
        Fn::GetAtt: 
          - CloudTrailTopic
          - TopicName
      IsLogging: true
      IsMultiRegionTrail: false

  ConfigRecorder:
    Type: AWS::Config::ConfigurationRecorder
    Properties:
      Name: default
      RecordingGroup:
        ResourceTypes: ['AWS::EC2::Volume']
      RoleARN: !GetAtt [ConfigRole, Arn]
  ConfigRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: [config.amazonaws.com]
          Action: ['sts:AssumeRole']
      ManagedPolicyArns: ['arn:aws:iam::aws:policy/service-role/AWSConfigRole']
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: s3:GetBucketAcl
            Resource: !Join ['', ['arn:aws:s3:::', !Ref 'ConfigBucket']]
          - Effect: Allow
            Action: s3:PutObject
            Resource: !Join ['', ['arn:aws:s3:::', !Ref 'ConfigBucket', /AWSLogs/,
                !Ref 'AWS::AccountId', /*]]
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control
          - Effect: Allow
            Action: config:Put*
            Resource: '*'
  ConfigBucket: 
    Type: AWS::S3::Bucket
    Properties:
      BucketName: archrefstackawsconfig
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
  ConfigBucketPolicy: 
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: 
        Ref: ConfigBucket
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Sid: "AWSConfigAclCheck"
            Effect: "Allow"
            Principal: 
              Service: "config.amazonaws.com"
            Action: "s3:GetBucketAcl"
            Resource: 
              !Sub |-
                arn:aws:s3:::${ConfigBucket}
          - 
            Sid: "AWSConfigWrite"
            Effect: "Allow"
            Principal: 
              Service: "config.amazonaws.com"
            Action: "s3:PutObject"
            Resource:
              !Sub |-
                arn:aws:s3:::${ConfigBucket}/AWSLogs/${AWS::AccountId}/*
            Condition: 
              StringEquals:
                s3:x-amz-acl: "bucket-owner-full-control"
  ConfigTopic: 
    Type: AWS::SNS::Topic
    Properties: 
      Subscription: 
        - 
          Endpoint: 
            Ref: OperatorEmail
          Protocol: email
  ConfigTopicPolicy: 
    Type: AWS::SNS::TopicPolicy
    Properties: 
      Topics: 
        - Ref: "ConfigTopic"
      PolicyDocument: 
        Version: "2008-10-17"
        Statement: 
          - 
            Sid: "AWSConfigSNSPolicy"
            Effect: "Allow"
            Principal: 
              Service: "config.amazonaws.com"
            Resource: "*"
            Action: "SNS:Publish"
  ConfigDeliveryChannel:
    Type: AWS::Config::DeliveryChannel
    Properties:
      ConfigSnapshotDeliveryProperties:
        DeliveryFrequency: Six_Hours
      S3BucketName: !Ref 'ConfigBucket'
      SnsTopicARN: !Ref 'ConfigTopic'
  ConfigRule:
    Type: 'AWS::Config::ConfigRule'
    DependsOn: ConfigRecorder
    Properties:
      ConfigRuleName: rds-multi-az-support
      Description: >-
        A Config rule that checks whether high availability is enabled for your RDS DB instances.
      Scope:
        ComplianceResourceTypes:
          - 'AWS::RDS::DBInstance'
      Source:
        Owner: AWS
        SourceIdentifier: RDS_MULTI_AZ_SUPPORT

Outputs:
  bastionPubIpAddress1:
    Description: Public ip address of bastion instance
    Value: !GetAtt
      - BastionInstance
      - PublicIp
  bastionPrivIpAddress1:
    Description: Private ip address of bastion instance
    Value: !GetAtt
      - BastionInstance
      - PrivateIp
  elbPubIpAddress:
    Description: Public ip address of bastion instance
    Value: !GetAtt
      - LoadBalancer
      - DNSName
  rdsEndpointAddress:
    Description: RDS endpoint address
    Value: !GetAtt
      - MasterDB
      - Endpoint.Address
  rdsEndpointPort:
    Description: RDS endpoint address ip
    Value: !GetAtt
      - MasterDB
      - Endpoint.Port
